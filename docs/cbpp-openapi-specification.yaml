openapi: 3.0.3
info:
  title: Community-Based Procurement Platform (CBPP) API
  description: |
    Comprehensive API for the Community-Based Procurement Platform serving Nigerian government procurement processes.
    
    ## Overview
    This API provides endpoints for managing community-based procurement processes, user management, contractor registration, and administrative functions.
    
    ## Authentication
    The API uses JWT-based authentication with role-based access control (RBAC).
    
    ## Base URL
    - Development: `http://localhost:8000`
    - Production: `https://api.cbpp.ng`
    
    ## Rate Limiting
    - 1000 requests per hour per authenticated user
    - 100 requests per hour per IP for unauthenticated endpoints
    
    ## Error Codes
    - 400: Bad Request - Invalid input data
    - 401: Unauthorized - Authentication required
    - 403: Forbidden - Insufficient permissions
    - 404: Not Found - Resource not found
    - 422: Unprocessable Entity - Validation errors
    - 429: Too Many Requests - Rate limit exceeded
    - 500: Internal Server Error - Server error
    
  version: 1.0.0
  contact:
    name: ASOS Consulting Development Team
    email: dev@asosconsulting.com
  license:
    name: Proprietary
    url: https://asosconsulting.com/license

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.cbpp.ng
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Admin
    description: Administrative functions
  - name: Contractors
    description: Contractor-specific operations
  - name: Profiles
    description: User profile management
  - name: Documents
    description: Document upload and management
  - name: System
    description: System health and configuration

paths:
  # ========================================
  # AUTHENTICATION ENDPOINTS
  # ========================================
  
  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT tokens
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  description: User password
                  example: "SecurePassword123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        description: JWT access token
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        description: JWT refresh token
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      user:
                        $ref: '#/components/schemas/User'
                      expiresIn:
                        type: integer
                        description: Token expiration time in seconds
                        example: 3600
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate tokens
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logout successful"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: JWT refresh token
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        description: New JWT access token
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      expiresIn:
                        type: integer
                        description: Token expiration time in seconds
                        example: 3600
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change user password
      description: Change user password with current password verification
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  description: Current password
                  example: "CurrentPassword123!"
                newPassword:
                  type: string
                  minLength: 8
                  description: New password
                  example: "NewPassword123!"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Password changed successfully"
        '401':
          description: Invalid current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  # ========================================
  # USER MANAGEMENT ENDPOINTS
  # ========================================

  /api/v1/users/profile:
    get:
      tags:
        - Profiles
      summary: Get user profile
      description: Get current user's profile information
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Profiles
      summary: Update user profile
      description: Update current user's profile information
      operationId: updateUserProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/users/documents:
    get:
      tags:
        - Documents
      summary: Get user documents
      description: Get current user's uploaded documents
      operationId: getUserDocuments
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          description: Filter by document type
          required: false
          schema:
            type: string
            enum: [profile_picture, identification, business_registration, tax_clearance, insurance, other]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: User documents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      documents:
                        type: array
                        items:
                          $ref: '#/components/schemas/Document'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Documents
      summary: Upload user document
      description: Upload a document for the current user
      operationId: uploadUserDocument
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - type
              properties:
                file:
                  type: string
                  format: binary
                  description: Document file to upload
                type:
                  type: string
                  enum: [profile_picture, identification, business_registration, tax_clearance, insurance, other]
                  description: Type of document
                description:
                  type: string
                  description: Optional description of the document
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Document uploaded successfully"
                  data:
                    $ref: '#/components/schemas/Document'
        '400':
          description: Invalid file or file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # ADMIN ENDPOINTS
  # ========================================

  /api/v1/admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Get list of all users (admin only)
      operationId: getAllUsers
      security:
        - BearerAuth: []
      parameters:
        - name: role
          in: query
          description: Filter by user role
          required: false
          schema:
            type: string
            enum: [super_admin, bpp_admin, procurement_officer, cbo_manager, project_manager, contractor, evaluator, regulator]
        - name: status
          in: query
          description: Filter by user status
          required: false
          schema:
            type: string
            enum: [active, inactive, pending, suspended]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Admin
      summary: Create new user
      description: Create a new user (admin only)
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - role
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "newuser@example.com"
                role:
                  type: string
                  enum: [super_admin, bpp_admin, procurement_officer, cbo_manager, project_manager, contractor, evaluator, regulator]
                  description: User role
                  example: "contractor"
                firstName:
                  type: string
                  description: User's first name
                  example: "John"
                lastName:
                  type: string
                  description: User's last name
                  example: "Doe"
                phoneNumber:
                  type: string
                  description: User's phone number
                  example: "+2348012345678"
                sendInvitation:
                  type: boolean
                  description: Whether to send invitation email
                  default: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User created successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/admin/users/{userId}/activate:
    put:
      tags:
        - Admin
      summary: Activate user
      description: Activate a user account (admin only)
      operationId: activateUser
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User activated successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/users/{userId}/deactivate:
    put:
      tags:
        - Admin
      summary: Deactivate user
      description: Deactivate a user account (admin only)
      operationId: deactivateUser
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for deactivation
                  example: "Account suspended due to policy violation"
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deactivated successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/dashboard/overview:
    get:
      tags:
        - Admin
      summary: Get admin dashboard overview
      description: Get system overview metrics for admin dashboard
      operationId: getAdminDashboardOverview
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dashboard overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AdminDashboardOverview'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # CONTRACTOR ENDPOINTS
  # ========================================

  /api/v1/contractors/register:
    post:
      tags:
        - Contractors
      summary: Contractor self-registration
      description: Register a new contractor (self-registration)
      operationId: registerContractor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - surname
                - businessName
                - cacNumber
                - dateOfIncorporation
                - sector
                - gender
                - bvn
                - state
                - lga
                - email
                - password
              properties:
                firstName:
                  type: string
                  description: Contractor's first name
                  example: "Adebayo"
                surname:
                  type: string
                  description: Contractor's surname
                  example: "Okeowo"
                businessName:
                  type: string
                  description: Business name
                  example: "Okeowo Construction Ltd"
                cacNumber:
                  type: string
                  description: Corporate Affairs Commission number
                  example: "RC123456"
                dateOfIncorporation:
                  type: string
                  format: date
                  description: Date of incorporation
                  example: "2020-01-15"
                sector:
                  type: string
                  description: Business sector
                  example: "Construction"
                gender:
                  type: string
                  enum: [Male, Female, "Prefer not to say"]
                  description: Gender
                  example: "Male"
                bvn:
                  type: string
                  minLength: 11
                  maxLength: 11
                  description: Bank Verification Number
                  example: "12345678901"
                state:
                  type: string
                  description: State of operation
                  example: "Lagos"
                lga:
                  type: string
                  description: Local Government Area
                  example: "Ikeja"
                email:
                  type: string
                  format: email
                  description: Email address
                  example: "adebayo.okeowo@contractor.com"
                password:
                  type: string
                  minLength: 8
                  description: Password
                  example: "SecurePassword123!"
                tin:
                  type: string
                  description: Tax Identification Number (optional)
                  example: "12345678-0001"
      responses:
        '201':
          description: Contractor registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Registration successful. Your account is pending approval."
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                        description: User ID
                        example: "550e8400-e29b-41d4-a716-446655440000"
                      status:
                        type: string
                        enum: [pending_approval]
                        description: Registration status
                        example: "pending_approval"
                      loginUrl:
                        type: string
                        description: URL for login
                        example: "/login"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/contractors/dashboard:
    get:
      tags:
        - Contractors
      summary: Get contractor dashboard
      description: Get contractor dashboard data based on approval status
      operationId: getContractorDashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PendingContractorDashboard'
                  - $ref: '#/components/schemas/ApprovedContractorDashboard'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Contractor access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/contractors/profile:
    get:
      tags:
        - Contractors
      summary: Get contractor profile
      description: Get contractor profile information
      operationId: getContractorProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Contractor profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ContractorProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Contractor access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Contractors
      summary: Update contractor profile
      description: Update contractor profile information
      operationId: updateContractorProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractorProfileUpdate'
      responses:
        '200':
          description: Contractor profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"
                  data:
                    $ref: '#/components/schemas/ContractorProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Contractor access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  # ========================================
  # SYSTEM ENDPOINTS
  # ========================================

  /api/v1/system/health:
    get:
      tags:
        - System
      summary: System health check
      description: Check system health and status
      operationId: getSystemHealth
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [healthy, degraded, unhealthy]
                        example: "healthy"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2024-12-15T10:30:00Z"
                      uptime:
                        type: number
                        description: System uptime in seconds
                        example: 86400
                      version:
                        type: string
                        description: API version
                        example: "1.0.0"
                      services:
                        type: object
                        properties:
                          database:
                            type: string
                            enum: [healthy, degraded, unhealthy]
                            example: "healthy"
                          cache:
                            type: string
                            enum: [healthy, degraded, unhealthy]
                            example: "healthy"
                          storage:
                            type: string
                            enum: [healthy, degraded, unhealthy]
                            example: "healthy"

# ========================================
# COMPONENTS
# ========================================

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    # User schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          description: User email
          example: "user@example.com"
        role:
          type: string
          enum: [super_admin, bpp_admin, procurement_officer, cbo_manager, project_manager, contractor, evaluator, regulator]
          description: User role
          example: "contractor"
        status:
          type: string
          enum: [active, inactive, pending, suspended]
          description: User status
          example: "active"
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        createdAt:
          type: string
          format: date-time
          description: Account creation date
          example: "2024-12-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2024-12-15T10:30:00Z"

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Profile ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        userId:
          type: string
          format: uuid
          description: User ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        phoneNumber:
          type: string
          description: Phone number
          example: "+2348012345678"
        address:
          type: string
          description: Address
          example: "123 Main Street, Lagos"
        profilePicture:
          type: string
          format: uri
          description: Profile picture URL
          example: "https://storage.example.com/profiles/user123.jpg"
        createdAt:
          type: string
          format: date-time
          description: Profile creation date
          example: "2024-12-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2024-12-15T10:30:00Z"

    UserProfileUpdate:
      type: object
      properties:
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        phoneNumber:
          type: string
          description: Phone number
          example: "+2348012345678"
        address:
          type: string
          description: Address
          example: "123 Main Street, Lagos"

    # Contractor schemas
    ContractorProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Contractor profile ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        userId:
          type: string
          format: uuid
          description: User ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        registrationType:
          type: string
          enum: [self_registered, admin_created]
          description: Registration type
          example: "self_registered"
        approvalStatus:
          type: string
          enum: [pending_approval, pending_verification, approved, rejected, suspended]
          description: Approval status
          example: "pending_approval"
        firstName:
          type: string
          description: First name
          example: "Adebayo"
        surname:
          type: string
          description: Surname
          example: "Okeowo"
        gender:
          type: string
          enum: [Male, Female, "Prefer not to say"]
          description: Gender
          example: "Male"
        bvn:
          type: string
          description: Bank Verification Number
          example: "12345678901"
        bvnVerified:
          type: boolean
          description: BVN verification status
          example: false
        businessName:
          type: string
          description: Business name
          example: "Okeowo Construction Ltd"
        cacNumber:
          type: string
          description: CAC number
          example: "RC123456"
        dateOfIncorporation:
          type: string
          format: date
          description: Date of incorporation
          example: "2020-01-15"
        sector:
          type: string
          description: Business sector
          example: "Construction"
        tin:
          type: string
          description: Tax Identification Number
          example: "12345678-0001"
        state:
          type: string
          description: State
          example: "Lagos"
        lga:
          type: string
          description: Local Government Area
          example: "Ikeja"
        phoneNumber:
          type: string
          description: Phone number
          example: "+2348012345678"
        email:
          type: string
          format: email
          description: Email
          example: "adebayo.okeowo@contractor.com"
        address:
          type: string
          description: Address
          example: "123 Construction Avenue, Ikeja, Lagos"
        bankName:
          type: string
          description: Bank name
          example: "First Bank of Nigeria"
        accountNumber:
          type: string
          description: Account number
          example: "0123456789"
        accountName:
          type: string
          description: Account name
          example: "Okeowo Construction Ltd"
        bankVerified:
          type: boolean
          description: Bank verification status
          example: false
        createdAt:
          type: string
          format: date-time
          description: Profile creation date
          example: "2024-12-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2024-12-15T10:30:00Z"

    ContractorProfileUpdate:
      type: object
      properties:
        firstName:
          type: string
          description: First name
          example: "Adebayo"
        surname:
          type: string
          description: Surname
          example: "Okeowo"
        phoneNumber:
          type: string
          description: Phone number
          example: "+2348012345678"
        address:
          type: string
          description: Address
          example: "123 Construction Avenue, Ikeja, Lagos"
        businessName:
          type: string
          description: Business name
          example: "Okeowo Construction Ltd"

    # Dashboard schemas
    PendingContractorDashboard:
      type: object
      properties:
        approvalStatus:
          type: string
          enum: [pending_approval]
          description: Approval status
          example: "pending_approval"
        approvalProgress:
          type: object
          properties:
            adminReview:
              type: string
              enum: [pending, in_progress, completed]
              description: Admin review status
              example: "pending"
            documentVerification:
              type: string
              enum: [not_started, pending, completed]
              description: Document verification status
              example: "not_started"
            bvnVerification:
              type: string
              enum: [pending, completed]
              description: BVN verification status
              example: "completed"
        estimatedTimeline:
          type: string
          description: Estimated approval timeline
          example: "5-7 business days"
        availableFeatures:
          type: array
          items:
            type: string
          description: Available features for pending contractors
          example: ["profile", "training", "notifications"]
        pendingFeatures:
          type: array
          items:
            type: string
          description: Features pending approval
          example: ["procurement", "contracts", "reports"]
        recentNotifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'

    ApprovedContractorDashboard:
      type: object
      properties:
        approvalStatus:
          type: string
          enum: [approved]
          description: Approval status
          example: "approved"
        activeContracts:
          type: array
          items:
            $ref: '#/components/schemas/Contract'
          description: Active contracts
        pendingApplications:
          type: array
          items:
            $ref: '#/components/schemas/TenderApplication'
          description: Pending tender applications
        recentPayments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
          description: Recent payments
        performanceMetrics:
          type: object
          properties:
            totalContracts:
              type: integer
              description: Total contracts
              example: 15
            completedProjects:
              type: integer
              description: Completed projects
              example: 12
            totalRevenue:
              type: number
              description: Total revenue
              example: 25000000
        recentNotifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'

    AdminDashboardOverview:
      type: object
      properties:
        totalUsers:
          type: integer
          description: Total number of users
          example: 1250
        activeUsers:
          type: integer
          description: Number of active users
          example: 980
        pendingApprovals:
          type: integer
          description: Number of pending approvals
          example: 45
        totalContractors:
          type: integer
          description: Total number of contractors
          example: 850
        approvedContractors:
          type: integer
          description: Number of approved contractors
          example: 720
        systemHealth:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: System health status
          example: "healthy"
        recentActivity:
          type: array
          items:
            $ref: '#/components/schemas/ActivityLog'

    # Document schemas
    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Document ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        userId:
          type: string
          format: uuid
          description: User ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        type:
          type: string
          enum: [profile_picture, identification, business_registration, tax_clearance, insurance, other]
          description: Document type
          example: "business_registration"
        fileName:
          type: string
          description: Original file name
          example: "company_registration.pdf"
        fileUrl:
          type: string
          format: uri
          description: File URL
          example: "https://storage.example.com/documents/company_reg.pdf"
        fileSize:
          type: integer
          description: File size in bytes
          example: 2048576
        mimeType:
          type: string
          description: MIME type
          example: "application/pdf"
        description:
          type: string
          description: Document description
          example: "Company registration certificate"
        verificationStatus:
          type: string
          enum: [pending, verified, rejected]
          description: Verification status
          example: "pending"
        uploadedAt:
          type: string
          format: date-time
          description: Upload date
          example: "2024-12-15T10:30:00Z"
        verifiedAt:
          type: string
          format: date-time
          description: Verification date
          example: "2024-12-15T10:30:00Z"

    # Common schemas
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Items per page
          example: 20
        total:
          type: integer
          description: Total number of items
          example: 150
        pages:
          type: integer
          description: Total number of pages
          example: 8
        hasNext:
          type: boolean
          description: Has next page
          example: true
        hasPrev:
          type: boolean
          description: Has previous page
          example: false

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "An error occurred"
        code:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        details:
          type: object
          description: Additional error details
          example: {}

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Validation error message
          example: "Validation failed"
        code:
          type: string
          example: "VALIDATION_ERROR"
        details:
          type: object
          description: Validation error details
          example:
            email: ["Invalid email format"]
            password: ["Password must be at least 8 characters"]

    # Placeholder schemas for future implementation
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Notification ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        title:
          type: string
          description: Notification title
          example: "Account Approval"
        message:
          type: string
          description: Notification message
          example: "Your account has been approved"
        type:
          type: string
          enum: [info, success, warning, error]
          description: Notification type
          example: "success"
        read:
          type: boolean
          description: Read status
          example: false
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: "2024-12-15T10:30:00Z"

    Contract:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Contract ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        title:
          type: string
          description: Contract title
          example: "Road Construction Project"
        value:
          type: number
          description: Contract value
          example: 5000000
        status:
          type: string
          enum: [active, completed, suspended]
          description: Contract status
          example: "active"

    TenderApplication:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Application ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        tenderTitle:
          type: string
          description: Tender title
          example: "School Renovation Project"
        status:
          type: string
          enum: [pending, under_review, approved, rejected]
          description: Application status
          example: "pending"

    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Payment ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        amount:
          type: number
          description: Payment amount
          example: 1000000
        status:
          type: string
          enum: [pending, processed, completed, failed]
          description: Payment status
          example: "completed"

    ActivityLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Activity ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        action:
          type: string
          description: Action performed
          example: "User registered"
        userId:
          type: string
          format: uuid
          description: User ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        timestamp:
          type: string
          format: date-time
          description: Activity timestamp
          example: "2024-12-15T10:30:00Z" 